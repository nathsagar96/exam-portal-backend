package org.examportal.exam;

import java.util.List;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class QuestionService {

  private final QuestionRepository questionRepository;

  public QuestionDto save(QuestionDto questionDto) {
    Question question =
        Question.builder()
            .question(questionDto.question())
            .options(questionDto.options())
            .quiz(Quiz.builder().id(questionDto.quizId()).build())
            .build();

    Question savedQuestion = questionRepository.save(question);
    return new QuestionDto(
        savedQuestion.getId(),
        savedQuestion.getQuestion(),
        savedQuestion.getOptions(),
        savedQuestion.getQuiz().getId());
  }

  public List<QuestionDto> findAll() {
    return questionRepository.findAll().stream()
        .map(
            question ->
                new QuestionDto(
                    question.getId(),
                    question.getQuestion(),
                    question.getOptions(),
                    question.getQuiz().getId()))
        .toList();
  }

  public QuestionDto findById(Long id) {
    Question question =
        questionRepository
            .findById(id)
            .orElseThrow(() -> new IllegalStateException("Question not found with id " + id));

    return new QuestionDto(
        question.getId(),
        question.getQuestion(),
        question.getOptions(),
        question.getQuiz().getId());
  }

  public QuestionDto update(Long id, QuestionDto questionDto) {
    Question question =
        questionRepository
            .findById(id)
            .orElseThrow(() -> new IllegalStateException("Question not found with id " + id));

    question.setQuestion(questionDto.question());
    question.setOptions(questionDto.options());

    Question updatedQuestion = questionRepository.save(question);
    return new QuestionDto(
        updatedQuestion.getId(),
        updatedQuestion.getQuestion(),
        updatedQuestion.getOptions(),
        updatedQuestion.getQuiz().getId());
  }

  public void deleteById(Long id) {
    questionRepository
        .findById(id)
        .orElseThrow(() -> new IllegalStateException("Question not found with id " + id));
    questionRepository.deleteById(id);
  }
}
